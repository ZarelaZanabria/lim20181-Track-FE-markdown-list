const checkIfFileOrFolder = path => util.promisify(fs.stat);
  stats('.').then(stats => {
     if (stats.isDirectory()) { 
      util.promisify(fs.readdir)
      .then(files=>{
        for (const fileName in files) {
          const element = files[fileName]
          /*  Si cuando recorre encuentra un directorio tiene que empezar
            de nuevo a validar  */
          checkIfFileOrFolder(path + '/' + element)         
        }
      }).catch(error=> console.log(error))      
    } else if (stats.isFile() && path.indexOf('.md', -3) >= 0) {
      /* Concatenamos por que vamos a obtener todos los links de 
        los archivos markdown encontrados */
      /* links = links.concat(readFile(path)) */
      links = links.concat(readFileMarkdown(path));
    }
  }).catch(error => console.log (error))

checkIfFileOrFolder('./example');


const func = () => {
    return new Promise((resolve, reject) => {
        console.log('antes de resolve arr')
        setTimeout(() => {
            resolve([
                {
                    href: 'href',
                    text: 'text',
                    file: 'file'
                }
            ])
        }, 1000)
    })
}

const a = func().then((arr) => {
    console.log('dentro de resolve')
    console.log(arr)
})

const funcAsync = (url) => {
    return new Promise((resolve, reject) => {
        console.log('antes de resolve fetch')
        fetch(url).then(response => {
            return response.json()
        }).then((json) => {
            resolve(json)
        }).catch((error) => {
            reject(error)
        })

    })
}

const b = funcAsync('https://gist.githubusercontent.com/planetoftheweb/98f35786733c8cccf81e/raw/f3dad774ed1fe20b36011b1261bb392ee759b867/data.json').then((json) => {
    console.log('dentro de resolve ya tengo los artistas')
    console.log(json)
})



const validateLinks = (arrLinks, callback) => {
  let linksValidate = [];
  arrLinks.map(objLink => {
    fetch(objLink.href)
      .then(({ status, statusText }) => linksValidate.push({
        ...objLink,
        validate: {
          status,
          statusText,
        }
      }))
      .catch(error => linksValidate.push({
        ...objLink,
        validate: {
          status: 404,
          statusText: 'FAIL',
        }
      }))
  });
  // esperando la respuesta de todas las promesas
  setTimeout(() => callback(linksValidate), 5000);
};